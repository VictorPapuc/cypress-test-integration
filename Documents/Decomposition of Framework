Decomposition of Framework  


 1.  In spate niste jsoane. 

 ui - api = as - api e ala cu UI 

 si domani_api e a ala cu API.

 examples e assert si dai json care il vrei tu ca si exemplu si ai partialJson sa iti filtreze info si sa iti faca vericiare pe campuri. 

 serenety.properites - vreau sa rulez ceva in particular (o clasa, un folder) => acolo modifici.


infra => resoursces => db -> updates => 
 
 Faci sql noi dat de dave si in scriptul de bash setup_data.sh 
 si adaugi fiserul  
 - apoi te duci si restartezi dockerul sa iti aiba in evidenta schimbarile. 


 branch naming > intreb dev-ul de branch si am accelasi branch. 

 pom.xml > 

 In infra iti updatezi branchul  in pom din master in branchul tau .

Orice scenarii de campaign trebuie sa le bagi in sh de campaign.

id are numele functionalitatii . 




Decomposition of Framework : 


  1. De unde se ruleaza Testele : 

    Locatie :
   - Module : as-api > directory : java (test) > package : audiomatic > java classes 
   - test package >directory resources >  fixtures > stories.as_api


    Structura:


   Clasele de test : 

   -Fiserele 
    
     @Story Spec care o interfata ce e construita sa primeasca 2 parametrii String filename de unde citeste story-ul si dependency care un array ce accepta clasa.
     SetupAsApi clasa de test care nu are depdendete deoarce testele pornesc de la ea ,  e setupul elementar
     Fiecare clasa de teste mosteneste BaseStory 
     BaseStory mosteneste SerenityStory >> la randul ei Serenity Stories cauta fisere stories sa le execute 
     BaseStory face override la clasele din SerenityStory precum :
                          -getRootPackage > aduce din serenity folder
                          -storynamesDerivedFromClassName 
     Clasele de test merg in functie de dependenta de bussiness > Advertiser > Orders > Campaingn > Ads
   
     Exemplu Clasa de test: 


     @StorySpecs(filename = "**/ui_api/audiomatic/scenarios_campaigns.story", dependencies = {SetupOrders.class})
     public class ScenariosCampaigns extends BaseStory{
     }

     Story : 
      
      Compozitie : 
      
      META : @project - proiectul din care face parte
           : @storyName - din ce scenariu faci parte  ; ex : campaign_scenarios


      Scenario 1 -> Descrierea test case-ului
      Meta Scenariului: id 
                        @status_automated > daca a fost automaziat scenariul si daca e functional 
     
      Given 
      Given the 'ui-api' user logs in as 'Admin Audiomatic' on client 'client'

      When 
      When the 'ui-api' user searches for order with name 'audiomatic_order' and saves the id as 'orderId'


      Then 
      Then response body should contain <partialBodyAsJson>












   - Logica : 

    - Pentru Set Up sunt doar scenarii pozitive 
    - Pentru scenarios testele sunt atat pozitive cat si negative





   
 










